datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Users {
    id             String     @id @default(auto()) @map("_id") @db.ObjectId
    provider_id    String?    @unique
    username       String     @unique
    email          String     @unique
    password       String?
    totp           String?
    totp_expiry    Int?
    email_verified Boolean    @default(false)
    created_at     DateTime   @default(now())
    updated_at     DateTime   @updatedAt
    last_login     String?
    last_logout    String?
    ip_address     String?
    login_token    String?
    auth_method    AuthMethod
    Profile        Profiles?
    Account        Accounts?
    Settings       Settings?
    Polls          Poll[]
    Vote           PollVote?
    Messages       Message[]
}

model Profiles {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    avatar    File?
    views     Int    @default(0)
    msgPoint  Int    @default(1)
    pollPoint Int    @default(1)
    bio       String @default("What's on your mind?")
    user      Users  @relation(fields: [userId], references: [id])
    userId    String @unique @db.ObjectId
}

model Accounts {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId
    disabled Boolean @default(false)
    verified Boolean @default(false)
    user     Users   @relation(fields: [userId], references: [id])
    userId   String  @unique @db.ObjectId
}

model Settings {
    id         String  @id @default(auto()) @map("_id") @db.ObjectId
    allowTexts Boolean @default(true)
    allowFiles Boolean @default(true)
    showLevels Boolean @default(true)
    genMsgType String  @default("normal")
    user       Users   @relation(fields: [userId], references: [id])
    userId     String  @unique @db.ObjectId
}

model Message {
    id      String  @id @default(auto()) @map("_id") @db.ObjectId
    texts   String?
    files   File[]
    date    String
    private Boolean @default(false)
    user    Users   @relation(fields: [userId], references: [id])
    userId  String  @unique @db.ObjectId
}

model Poll {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    title       String?
    options     Option[]
    active      Boolean   @default(true)
    expiry      String
    totalVotes  Int
    createdBy   Users     @relation(fields: [createdById], references: [id])
    createdById String    @unique @db.ObjectId
    votes       PollVote?
}

model Option {
    id         String     @id @default(auto()) @map("_id") @db.ObjectId
    texts      String
    poll       Poll       @relation(fields: [pollId], references: [id])
    pollId     String     @unique @db.ObjectId
    votes      PollVote[]
    totalVotes Int
}

model PollVote {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    userId   String @unique @db.ObjectId
    user     Users  @relation(fields: [userId], references: [id])
    optionId String @unique @db.ObjectId
    option   Option @relation(fields: [optionId], references: [id])
    pollId   String @unique @db.ObjectId
    poll     Poll   @relation(fields: [pollId], references: [id])
}

type File {
    idx  String
    url  String
    path String
    type String?
}

enum AuthMethod {
    google
    github
    local
}
